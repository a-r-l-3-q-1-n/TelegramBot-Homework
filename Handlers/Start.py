from aiogram import Router
from aiogram.types import Message
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext

from Database.Data import Database
from Keyboards.Builder import builder
from Keyboards.Reply import continue_kb, menu_kb
from Misc.States import RegisterUser
from Utils.Logger import Logger


db = Database()
logger = Logger()

router = Router()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer(text='–ü—Ä–∏–≤–µ—Ç! üëãüòÅ\n'
                              '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —É—á–µ–±–æ–π. üìöüìñ\n'
                              '–î–æ–±–∞–≤–ª—è–π –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –º–µ–Ω—è. üìù\n\n'
                              '–≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∏ –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ! ‚ú®üòä')

    if await db.get_user(message.from_user.id, "username") is None:
        await state.set_state(RegisterUser.NAME)
        await message.answer(text="–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üåü‚úçÔ∏è",
                             reply_markup=await builder(message.from_user.full_name))
    else:
        await message.answer(text="–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! ‚úÖ",
                             reply_markup=continue_kb)
        await state.set_state(RegisterUser.FINAL)


@router.message(RegisterUser.NAME)
async def name(message: Message, state: FSMContext):
    try:
        if not message.text.isnumeric():
            telegram_id = message.from_user.id
            username = message.text

            await db.create_user(telegram_id, username)
            await state.set_state(RegisterUser.FINAL)

            await message.answer(text=f"{username} —Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! ‚úÖ",
                                 reply_markup=continue_kb)
        else:
            await message.answer(text="–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. üòä‚úèÔ∏è",
                                 reply_markup=await builder(message.from_user.full_name))

    except Exception:
        await message.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏.\n"
                                  "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. üö´üîÑ",
                             reply_markup=await builder(message.from_user.full_name))


@router.message(RegisterUser.FINAL)
async def final(message: Message, state: FSMContext):
    try:
        if message.text.lower().__contains__("–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å"):
            await state.clear()
            await message.answer(text="–£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ –ª–µ–≥–∫–æ! üìö",
                                 reply_markup=menu_kb)
        else:
            await message.answer(text="–ù–∞–∂–º–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å ‚û°Ô∏è",
                                 reply_markup=continue_kb)

    except Exception:
        await message.answer(text="–ù–∞–∂–º–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å ‚û°Ô∏è",
                             reply_markup=continue_kb)
